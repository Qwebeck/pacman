import pygame as pg
import sys
from os import path
from settings import *
from sprites import *
import thorpy as th
from a_star import *

class Game:
    def __init__(self):
        pg.init()
        self.speed=PLAYER_SPEED
        self.tilesize = TILESIZE
        self.GRIDWIDTH = WIDTH / self.tilesize
        self.GRIDHEIGHT = HEIGHT / self.tilesize
        self.ghosts = GHOSTS
        self.screen = pg.display.set_mode((WIDTH, HEIGHT))
        pg.display.set_caption(TITLE)
        self.clock = pg.time.Clock()
        pg.key.set_repeat(500, 100)
        self.load_data()
        self.score = 0
        self.minutes = 0
        self.seconds = 0
        self.font_name = pg.font.match_font(FONT_NAME)
        self.running = True
        #timer variable
        self.last_update = 0
        self.ghost_speed = GHOST_SPEED
    
    # def maze_transform(maze,map):
    # for row, tiles in enumerate(map):
    #     row = []
    #     for col, tile in enumerate(tiles):
    #         if tile == '\n':
    #             break    
    #         if tile=='.' or tile =='G' or tile == 'P':
    #             row.append(0)    
    #         else:
    #             row.append(1) 
    #     maze.append(row)
    # return maze  player_coords
 
    

    def load_data(self):
        self.game_folder = path.dirname(__file__)
        self.img_folder = path.join(self.game_folder, 'images')
        self.player_img = pg.image.load(path.join(self.img_folder, PACMAN_IMAGE[2])).convert_alpha()
        self.ghost_img = pg.image.load(path.join(self.img_folder, GHOST_IMAGE)).convert_alpha()
        self.running = False

        self.map_data = []
        with open(path.join(self.game_folder, 'map.txt'), 'rt') as f:
            for line in f:
                self.map_data.append(line)
        maze = []
        self.player_coords = maze_transform(maze,self.map_data)
        self.maze = maze
        # for row in self.maze:
            # print(row)
        
       
        


    def new(self):
        # initialize all variables and do all the setup for a new game
        self.all_sprites = pg.sprite.Group()
        self.walls = pg.sprite.Group()
        self.coins = pg.sprite.Group()
        self.ghosts = pg.sprite.Group()


        map_len = len(self.map_data[0])
        for row, tiles in enumerate(self.map_data):
            for col, tile in enumerate(tiles):
                #coordinates i want map to appear
                col += int((self.GRIDWIDTH-map_len)/2)
                row += 5

                if tile == '1':
                    Wall(self, col, row)
                if tile == '.':
                    Coins(self,col,row)
                if tile == 'P':
                    self.player = Player(self, col, row)
                if tile == 'G':
                    # print(self.maze)
                    ghost_cord = (row - 5,col - int((self.GRIDWIDTH-map_len)/2))
                    print("Player :",self.player_coords)
                    print("Ghost :",ghost_cord)
                    path = a_star(self.maze[:len],ghost_cord,self.player_coords)
                    
                    # for i in range (1,len(path) - 1):
                    #     if path[i][0] != path[i-1][0] and path[i][1] != path[i-1][1]:
                    #         print("Previous : ",path[i])
                    #         print("Current :",path[i-1])
                    print("Path :",path)
                    Ghost(self,col,row,path)

                # if tile == 'T':
                #     if tile in self.teleports:
                #         #gridheight guarants me that there will be no repeated keys in dictionary
                #         self.teleports[col + GRIDHEIGHT] = row
                #     else:
                #         self.teleports[col]=row
                col -= int((self.GRIDWIDTH-map_len)/2)
                row -= 5
    def run(self):
        #print
        # game loop - set self.playing = False to end the game
        self.playing = True
        while self.playing:
            self.dt = self.clock.tick(FPS) / 1000
            now = pg.time.get_ticks()
            if now - self.last_update > 1000:
                self.last_update = now
                self.seconds += 1
                if self.seconds >= 60:
                    self.seconds = 0
                    self.minutes += 1
            self.events()
            self.update()
            self.draw()


    def quit(self):
        pg.quit()
        sys.exit()

    def update(self):
        # update portion of the game loop
        self.all_sprites.update()

    def draw_grid(self):
        for x in range(0, WIDTH, self.tilesize):
            pg.draw.line(self.screen, LIGHTGREY, (x, 0), (x, HEIGHT))
        for y in range(0, HEIGHT, self.tilesize):
            pg.draw.line(self.screen, LIGHTGREY, (0, y), (WIDTH, y))

    def drawing_of_changable(self):
        if self.minutes < 10:
            minutes = "0" + str(self.minutes)
        else:
            minutes = str(self.minutes)
        if self.seconds < 10:
            seconds = "0" + str(self.seconds)
        else:
            seconds = str(self.seconds)
        self.draw_text("Timer ", self.tilesize, WHITE, self.GRIDWIDTH // 2 * self.tilesize, 3 * self.tilesize)
        self.draw_text(minutes +":" + seconds, self.tilesize, WHITE, (self.GRIDWIDTH // 2 + 3) * self.tilesize, 3 * self.tilesize)
        self.draw_text("Score ", self.tilesize, WHITE, (self.GRIDWIDTH - len(self.map_data[0])) // 2 * self.tilesize, 3 * self.tilesize)
        self.draw_text(str(self.score), self.tilesize, WHITE, ((self.GRIDWIDTH - len(self.map_data[0])) // 2 + 5) * self.tilesize, 3 * self.tilesize)



    def draw(self):
        pg.display.set_caption("{:.2f}".format(self.clock.get_fps()))
        self.screen.fill(BGCOLOR)
        self.draw_grid()
        self.all_sprites.draw(self.screen)
        self.drawing_of_changable()
        pg.display.flip()


    def events(self):
        # catch all events here
        for event in pg.event.get():
            if event.type == pg.QUIT:
                self.quit()
            if event.type == pg.KEYDOWN:
                if event.key == pg.K_ESCAPE:
                    self.quit()
                self.all_sprites.update()
                if event.key == pg.K_LEFT:
                    self.swap(0,90)
                    # self.player.rot = 90
                if event.key == pg.K_RIGHT:
                    self.swap(1,-90)
                    self.player.rot = -90
                if event.key == pg.K_UP:
                    self.swap(3,0)
                    # self.player.rot = 0

                if event.key == pg.K_DOWN:
                    self.swap(2,180)
                    # self.player.rot = 180


    def swap(self, dir ,rot):
        if self.player.previous_key == -1 :
            self.player.keys = dir
            self.player.previous_key = dir
            self.player.rot = rot
            self.player.previous_rot = rot
        else:
            self.player.rot, self.player.previous_rot = rot, self.player.rot
            self.player.keys, self.player.previous_key = dir, self.player.keys

    def draw_text(self, text, size, color, x, y):
        font = pg.font.Font(self.font_name, size)
        text_surface = font.render(text, True, color)
        text_rect = text_surface.get_rect()
        text_rect.topleft = (x, y)
        self.screen.blit(text_surface, text_rect)

    def wait_for_key(self):
        waiting = True
        while waiting:
            self.clock.tick(FPS)
            # for event in pg.event.get():
                # self.menu.react(event)
                # print(self.slider.get_value())
                # self.tilesize = int(self.slider.get_value())
            for event in pg.event.get():
                if event.type == pg.QUIT:
                    waiting = False
                    self.running = False
                if event.type == pg.KEYUP:
                    waiting = False

    def show_start_screen(self):
        application = th.Application(size=(WIDTH, HEIGHT), caption="Hello world")
        e_title = th.make_text("Pacman", font_size=20, font_color=WHITE)
        # e_title.center()
        e_title.set_topleft((10, 10))
        play_button = th.make_button("Play", func=th.functions.quit_menu_func)
        varset = th.VarSet()
        varset.add("tilesize", value=TILESIZE, text="Size of objects:", limits=(8, 32))
        varset.add("speed", value=PLAYER_SPEED, text="Speed:", limits=(10, 500))
        varset.add("ghosts", value=GHOSTS, text="Ghosts:", limits=(0, 20))
        varset.add("ghost_speed", value=GHOST_SPEED, text="Ghosts speed:", limits=(10, 500))
        e_options = th.ParamSetterLauncher.make([varset], "Options", "Options")
        quit_button = th.make_button("Quit",func=th.functions.quit_func)
        elements = [e_title, play_button, e_options, quit_button]
        e_background = th.Background.make(color=DARKGREY, elements=elements)
        th.store(e_background, elements)
        th.store(e_background)
        menu = th.Menu(e_background)  # create a menu on top of the background
        menu.play()  # launch the menu
        pg.display.flip()
        self.tilesize = varset.get_value("tilesize")
        self.speed = varset.get_value("speed")
        self.GRIDWIDTH = WIDTH / self.tilesize
        self.GRIDHEIGHT = HEIGHT / self.tilesize
        self.ghosts = varset.get_value("ghosts")
        self.ghost_speed = varset.get_value("ghost_speed")

        # pg.display.flip()
        # self.wait_for_key()


    def show_go_screen(self):
        pass



# create the game object
g = Game()
g.show_start_screen()
while True:
    g.new()
    g.run()
g.show_go_screen()


#  self.screen.fill(BGCOLOR)
#             application = th.Application(size=(WIDTH, HEIGHT), caption="Hello world")
#
#             e_title = th.make_text("Pacman", font_size=20, font_color=(0, 0, 150))
#             e_title.center()
#             e_title.set_topleft((None, 10))
#             play_button = th.make_button("Play", func=th.functions.quit_menu_func)
#
#             varset = th.VarSet()
#             varset.add("tilesize", value=TILESIZE, text="Size of objects:", limits=(8, 32))
#             varset.add("speed", value=PLAYER_SPEED, text="Speed:", limits=(10, 500))
#             varset.add("player_name", value=PLAYER_NAME, text="Player name:")
#             e_options = th.ParamSetterLauncher.make([varset], "Options", "Options")
#             e_background = th.Background.make(color=DARKGREY,
#                                               elements=[e_title, play_button, e_options])
#             th.store(e_background, [play_button, e_options])
#             th.store(e_background)
#
#             menu = th.Menu(e_background)  # create a menu on top of the background
#             menu.play()  # launch the menu
#             pg.display.flip()
#             MOD_TILE = varset.get_value("tilesize")
#             MOD_NAME = varset.get_value("player_name")
#             MOD_SPEED = varset.get_value("speed")
#             return  MOD_TILE,MOD_SPEED,MOD_NAME

























import pygame as pg
import sys
import random
from os import path
from settings import *
vec = pg.math.Vector2
random.seed()


def collide_with_walls(sprite, dir, group):
    hits = pg.sprite.spritecollide(sprite, group, False)
    if dir == 'x':
        if hits:
            if sprite.vel.x > 0:
                sprite.pos.x = hits[0].rect.left - sprite.rect.width
            elif sprite.vel.x < 0:
                sprite.pos.x = hits[0].rect.right
            sprite.vel.x = 0
            sprite.rect.x = sprite.pos.x
            return True
    if dir == 'y':
        if hits:
            if sprite.vel.y > 0:
                sprite.pos.y = hits[0].rect.top - sprite.rect.width
            elif sprite.vel.y < 0:
                sprite.pos.y = hits[0].rect.bottom
            sprite.vel.y = 0
            sprite.rect.y = sprite.pos.y
            return True


class Player(pg.sprite.Sprite):
    def __init__(self, game, x, y):
        self.groups = game.all_sprites
        pg.sprite.Sprite.__init__(self, self.groups)
        self.game = game
        self.image = pg.transform.scale(self.game.player_img, (self.game.tilesize, self.game.tilesize))
        self.rect = self.image.get_rect()
        self.keys = -1
        self.previous_key = -1
        self.vel = vec(0, 0)
        self.pos = vec(x, y) * self.game.tilesize
        self.index =0
        self.rot = 0
        self.previous_rot = 0
        self.last_update = 0
        self.current_frame = 0

    def get_keys(self, key): #check for two keys
        self.vel = vec(0, 0)
        if key == 0: #left
            self.vel.x = -self.game.speed
        elif key == 1: #right
            self.vel.x = self.game.speed
        elif key == 2:#down
            self.vel.y = self.game.speed
        elif key == 3:#up
            self.vel.y = -self.game.speed

    def teleport(self):
        maplen = len(self.game.map_data[0])
        if self.pos.x > ((self.game.GRIDWIDTH - maplen -4 )//2 + maplen) * self.game.tilesize:
            #uppos that  4 because of  5 i add in my init
            self.pos.x = (self.game.GRIDWIDTH - maplen) // 2 * self.game.tilesize
        if self.pos.x < (self.game.GRIDWIDTH - maplen)//2 * self.game.tilesize:
            self.pos.x = ((self.game.GRIDWIDTH - maplen - 4) // 2 + maplen ) * self.game.tilesize
        # if self.vel.x > 0 and self.pos.x > self.game.teleports[self.pos.y//32 + GRIDHEIGHT] + 32 :
            # +32 because i want be on right end of the tile and just then teleport
        #     print("called")
        #     self.pos.x = self.game.teleports[self.pos.y//32]
        # elif self.vel.x < 0 and self.pos.x < self.game.teleports[self.pos.y]:
        #     self.pos.x = self.game.teleports[self.pos.y//32 + GRIDHEIGHT]

    # def collide_with_walls(self, dir):
    #     hits = pg.sprite.spritecollide(self, self.game.walls, False)
    #     if dir == 'x':
    #         if hits:
    #             if self.vel.x > 0:
    #                 self.pos.x = hits[0].rect.left - self.rect.width
    #             elif self.vel.x < 0:
    #                 self.pos.x = hits[0].rect.right
    #             self.vel.x = 0
    #             self.rect.x = self.pos.x
    #             return True
    #     if dir == 'y':
    #         if hits:
    #             if self.vel.y > 0:
    #                 self.pos.y = hits[0].rect.top - self.rect.width
    #             elif self.vel.y < 0:
    #                 self.pos.y = hits[0].rect.bottom
    #             self.vel.y = 0
    #             self.rect.y = self.pos.y
    #             return True
    # player_cords
    #same 

    def move(self):
        self.pos += self.vel * self.game.dt
        self.rect.x = self.pos.x
        coll = collide_with_walls(self,'x',self.game.walls)
        if pg.sprite.spritecollide(self, self.game.coins, True):
            self.game.score += 100
        self.rect.y = self.pos.y
        # self.teleport()
        # try self.teleport() exeptt
        if not coll:
            coll = collide_with_walls(self,'y',self.game.walls)
        return coll


    def update(self):
        #change in future
        map_len = len(self.game.map_data[0])

        self.game.player_coords = (self.rect.centerx // TILESIZE -int((self.game.GRIDWIDTH-map_len)/2),self.rect.centery // TILESIZE - 5)
        # print("Player coordinates :",self.game.player_coords)
        if self.game.player_coords not in self.game.path:
                self.game.path.append(self.game.player_coords)
                # print("Player tile coords:",self.game.player_coords)

        self.get_keys(self.keys)
        self.teleport()
        collision = self.move()
        self.animate()
        # print(self.rot)
        if collision:
            self.image = pg.transform.scale(pg.transform.rotate(self.game.player_img, self.previous_rot), (self.game.tilesize, self.game.tilesize))
            self.get_keys(self.previous_key)
            self.teleport()
            if self.move():#move returns true when collision
                self.image = pg.image.load(path.join(self.game.img_folder, PACMAN_IMAGE[2])).convert_alpha()
                self.image = pg.transform.scale(self.image, (self.game.tilesize, self.game.tilesize))


        else:
            self.image = pg.transform.scale(pg.transform.rotate(self.game.player_img, self.rot), (self.game.tilesize, self.game.tilesize))
            self.previous_key = self.keys
            self.previous_rot = self.rot




    def animate(self):
        now = pg.time.get_ticks()
        if now - self.last_update > ANIMATION_SPEED and self.keys != -1:
            self.last_update = now
            self.current_frame = (self.current_frame + 1 ) % 3
            self.game.player_img = pg.image.load(path.join(self.game.img_folder, PACMAN_IMAGE[self.current_frame])).convert_alpha()


class Ghost(pg.sprite.Sprite):
    def __init__(self, game, x, y,path=None):
        self.groups = game.all_sprites, game.ghosts
        pg.sprite.Sprite.__init__(self, self.groups)
        self.game = game
        self.image = pg.transform.scale(self.game.ghost_img, (self.game.tilesize, self.game.tilesize))
        self.rect = self.image.get_rect()
        self.pos = vec(x, y) * self.game.tilesize
        self.vel = vec(0, 0)
        self.rect.x = self.pos.x
        self.rect.y = self.pos.y
        self.last_update = 0
        self.offset = random.choice([-1, 1])  # -1 - x-axes
        self.dir = random.choice([-1,1])
        self.speed = self.game.ghost_speed
        self.path_to_player = path


    
    def key_converter(self,key):
        if key == 0:
            self.offset =  -1# -1 - x-axes
            self.dir = -1
        elif key == 1:
            self.offset = -1 # -1 - x-axes
            self.dir = 1
        elif key == 2:
            self.offset = -1  # -1 - x-axes
            self.dir = 1
        elif key == 3:
            self.offset = -1  # -1 - x-axes
            self.dir = 1
    
    def check_for_player(self):
        # if (self.game.player.vel.x >= self.vel.x > 0 or self.game.player.vel.x <= self.vel.x < 0 ) and self.game.player.rect.centery == self.rect.centery:
        #     print("same direction on horizontal and same offset")
        # elif (self.game.player.vel.y >= self.vel.y > 0 or self.game.player.vel.y <= self.vel.y < 0) and self.game.player.rect.centerx == self.rect.centerx:
        #     print("same direction no vertical and same offset ")
        if self.game.player.rect.centery == self.rect.centery and (self.vel.x > 0 and self.game.player.rect.x - self.rect.x > 0 or  self.vel.x < 0 and self.game.player.rect.x - self.rect.x < 0) :
            # print("same direction on horizonrtal offset ")
            self.speed += 1
            self.key_converter(self.game.player.keys)
            
        if self.game.player.rect.centerx == self.rect.centerx and (self.vel.y > 0 and self.game.player.rect.y - self.rect.y > 0 or  self.vel.y < 0 and self.game.player.rect.y - self.rect.y < 0) :
            self.speed += 1
            self.key_converter(self.game.player.keys)
            # print("same direction on vertical offset ")

    def direction(self):
        self.vel = vec(0, 0)
        if self.offset == 1:
            if self.dir == 1:
                self.vel.y = self.speed
            if self.dir == -1:
                self.vel.y = -self.speed
        if self.offset == -1:
            if self.dir == 1:
                self.vel.x = self.speed
            if self.dir == -1:
                self.vel.x = -self.speed
    
    def turn(self):
        self.offset = random.choice([-1, 1])  # -1 - x-axes
        self.dir = random.choice([-1,1])

    def movement(self):
        self.check_for_player()
        self.direction()
        now = pg.time.get_ticks()
        if now - self.last_update > 5000:
        
            self.turn()
            self.last_update = now

        if self.game.player.keys != -1:
            self.speed = self.game.ghost_speed
            self.pos += self.vel * self.game.dt
            self.rect.x = self.pos.x
            coll = collide_with_walls(self,'x',self.game.walls)
            self.rect.y = self.pos.y
            # self.teleport() print
            # try self.teleport() exeptt
            if not coll:
                coll = collide_with_walls(self,'y',self.game.walls)
            return coll
            
    def update(self):
        if self.movement():
            #Tmp change ,added to player class , because this one is to slow
            # if self.game.player_coords not in self.path_to_player:
            #     self.path_to_player.append(self.game.player_coords)
            #     print("Player tile coords:",self.game.player_coords)
            # print(self.path_to_player)
            self.turn()
            self.direction()


class Wall(pg.sprite.Sprite):
    def __init__(self, game, x, y):
        self.groups = game.all_sprites, game.walls
        pg.sprite.Sprite.__init__(self, self.groups)
        self.game = game
        self.image = pg.Surface((self.game.tilesize, self.game.tilesize))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.x = x
        self.y = y
        self.rect.x = x * self.game.tilesize
        self.rect.y = y * self.game.tilesize

class Coins(pg.sprite.Sprite):
    def __init__(self, game, x, y):
        self.groups = game.all_sprites, game.coins
        pg.sprite.Sprite.__init__(self, self.groups)
        game_folder = path.dirname(__file__)
        img_folder = path.join(game_folder, 'images')
        self.image = pg.transform.scale(pg.image.load(path.join(img_folder, 'coin.png')),
                                        (game.tilesize, game.tilesize))
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.x = x
        self.y =y
        self.rect.x = x * game.tilesize
        self.rect.y = y * game.tilesize












WHITE = (255, 255, 255)
WHITE_OP_Q = (255, 255, 255, 0.2)
BLACK = (0, 0, 0)
DARKGREY = (40, 40, 40)
DARKGREY_OP_Q = (40, 40, 40, 0.2)
LIGHTGREY = (100, 100, 100)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
YELLOW = (255, 255, 0)
FONT_NAME = "arial"
COLORS=[WHITE, BLACK, DARKGREY, LIGHTGREY, GREEN, RED, YELLOW]

# game settings
WIDTH = 1024   # 16 * 64 or 32 * 32 or 64 * 16
HEIGHT = 768  # 16 * 48 or 32 * 24 or 64 * 12
FPS = 100
TITLE = "Tilemap Demo"
BGCOLOR = DARKGREY

#player settings
PLAYER_SPEED = 100
ANIMATION_SPEED = 100
PACMAN_IMAGE = ['pacman_top.png', 'animation_pacman_top.png', 'circle.png']

#mob settings
GHOSTS = 5
GHOST_IMAGE = 'red_ghost.png'
GHOST_SPEED = 95


# GRID_SCALE = (int((self.GRIDWIDTH-map_len)/2),5) #0 -col 1 - row
TILESIZE = 16




# # #a star tutorial
import pygame as pg
import sys
from os import path
from settings import *
from sprites import *
import thorpy as th
from scipy.spatial import distance


class Node():
    """A node class for A* Pathfinding"""

    def __init__(self, parent=None, position=None):
        self.parent = parent
        self.position = position

        self.g = 0
        self.h = 0
        self.f = 0

    def __eq__(self, other):
        return self.position == other.position

def a_star(maze,start,end):
    # for row in maze:
        # print(row)
    start_node = Node(None, start)
    start_node.g = start_node.h = start_node.f = 0
    end_node = Node(None, end)
    end_node.g = end_node.h = end_node.f = 0

    # Initialize both open and closed list
    open_list = []
    closed_list = []
    
    open_list.append(start_node)

    while len(open_list) > 0:
        # Get the current node
        current_node = open_list[0]
        current_index = 0
        
        for index, item in enumerate(open_list):
            if item.f < current_node.f:
                current_node = item
                current_index = index
        open_list.pop(current_index)
        closed_list.append(current_node)
#         # print(current_node.position)
        if current_node == end_node:
            path = []
            current = current_node
            while current is not None:
                path.append(current.position)
                current = current.parent
                # print(path)
            return path[::-1] # Return reversed path

        
        children = []
        for new_position in [(0, -1), (0, 1), (-1, 0), (1, 0)]: # Adjacent squares
            node_position = (current_node.position[0] + new_position[0], current_node.position[1] + new_position[1])
            if node_position[0] > (len(maze) - 1) or node_position[0] < 0 or node_position[1] > (len(maze[len(maze)-1]) -1) or node_position[1] < 0:
                continue
            if maze[node_position[0]][node_position[1]] == 1:
                continue
            
            new_node = Node(current_node, node_position)
            # print("New node :",node_position)
            
            children.append(new_node)

            for child in children:
                for closed_child in closed_list:
                    if child == closed_child:
                        continue
                
                child.g = child.parent.g + 1
                # child.h = (end_node.position[0] - node_position[0])**2 + (end_node.position[1] - node_position[1])**2
                # child.h = (end_node.position[0] - node_position[0])**2 + (end_node.position[1] - node_position[1]) ** 2
                child.h = distance.cityblock(node_position, end_node.position)
                child.f = child.g + child.h
            
            for open_node in open_list:
                if open_node == child and open_node.f < child.f:
                    continue
            
            open_list.append(child)

# def main():
# game_folder = path.dirname(__file__)
# img_folder = path.join(game_folder, 'images')
# map_data = []
# with open(path.join(game_folder, 'map.txt'), 'rt') as f:
#     for line in f:
#         map_data.append(line)

# my_maze = []
# map_len = len(map_data[0])
# row_index = 0
# col_index = 0
def maze_transform(maze,map):
    for row, tiles in enumerate(map):
        el_row = []
        for col, tile in enumerate(tiles):
            if tile =='G':
                pass# print("Ghost :",(row,col))
            if tile =='P':
                player_coordinates = (row,col)
                # print("Player :",(row,col))
            if tile == '\n':
                break
            # if (el_row_index == 0 and col_index == 12) or el_row_index == 7 and col_index == 14 :
            #       el_row.append("P")    
            if tile=='.' or tile =='G' or tile == 'P':
                el_row.append(0)    
            else:
                el_row.append(1)
           
        maze.append(el_row)
    return player_coordinates
 
# maze_transform(my_maze,map_data)
# for row in my_maze:
#         print(row)

# for row in my_maze:
#     print(row)

# maze = [[0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
#             [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
#             [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
#             [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
#             [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
#             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#             [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
#             [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
#             [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
#             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

# start = (9, 13)
# end = (10, 10)


# path = a_star(my_maze, start, end)
# print(path)

